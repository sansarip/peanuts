["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$schema.spec.variant","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^:","^:","~$spec","~$schema.spec.core","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$option-step",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/schema/spec/variant.cljs","~:line",12,"~:column",8,"~:end-line",12,"~:end-column",19,"~:private",true,"~:arglists",["~#list",["~$quote",["^J",[["~$o","~$params","~$else"]]]]]],"^H",true,"^5","~$schema.spec.variant/option-step","^C","resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",19,"~:method-params",["^J",[["~$o","^L","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^E",1,"~:variadic?",false,"^D",12,"~:ret-tag",["^4",["~$any","~$function"]],"^F",12,"~:max-fixed-arity",3,"~:fn-var",true,"^I",["^J",["^K",["^J",[["~$o","^L","^M"]]]]]],"~$VariantSpec",["^ ","~:num-fields",4,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$schema.spec.core/CoreSpec","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$schema.spec.variant/VariantSpec","^C","resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",23,"~:type",true,"^E",12,"~:internal-ctor",true,"^D",41,"~:record",true,"^F",41,"~:tag","^U","~:skip-protocol-flag",["^4",["^[","^10","^11","^12","^13","^14","^16","^17","^18","^19","^1:","^1;","^1<","^1=","^1>"]]],"~$->VariantSpec",["^ ","^A",null,"^B",["^ ","^C","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",23,"^E",12,"^1A",true,"~:factory","~:positional","^D",41,"^F",41,"^I",["^J",["^K",["^J",[["~$pre","~$options","~$err-f","~$post"]]]]],"~:doc","Positional factory function for schema.spec.variant/VariantSpec."],"^5","~$schema.spec.variant/->VariantSpec","^C","resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",23,"^O",["^J",[["^1H","^1I","^1J","^1K"]]],"^P",null,"^Q",["^J",[null,null]],"^E",1,"^1A",true,"^R",false,"^1F","^1G","^D",41,"^S","^1?","^F",41,"^V",4,"^W",true,"^I",["^J",["^K",["^J",[["^1H","^1I","^1J","^1K"]]]]],"^1L","Positional factory function for schema.spec.variant/VariantSpec."],"~$map->VariantSpec",["^ ","^A",null,"^B",["^ ","^C","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",23,"^E",12,"^1A",true,"^1F","~:map","^D",41,"^F",41,"^I",["^J",["^K",["^J",[["~$G__34477"]]]]],"^1L","Factory function for schema.spec.variant/VariantSpec, taking a map of keywords to field values."],"^5","~$schema.spec.variant/map->VariantSpec","^C","resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",23,"^O",["^J",[["^1P"]]],"^P",null,"^Q",["^J",[null,null]],"^E",1,"^1A",true,"^R",false,"^1F","^1O","^D",41,"^S","^1?","^F",41,"^V",1,"^W",true,"^I",["^J",["^K",["^J",[["^1P"]]]]],"^1L","Factory function for schema.spec.variant/VariantSpec, taking a map of keywords to field values."],"~$variant-spec",["^ ","^A",null,"^B",["^ ","^C","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^D",61,"^E",7,"^F",61,"^G",19,"^I",["^J",["^K",["^J",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]]]]],"^1L","A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard).","~:top-fn",["^ ","^R",false,"~:fixed-arity",4,"^V",4,"^O",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]],"^I",["^J",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]]],"^Q",["^J",[null,null,null]]]],"^5","~$schema.spec.variant/variant-spec","^C","resources/public/dev/js/compiled/src/schema/spec/variant.cljs","^G",19,"^1S",["^ ","^R",false,"^1T",4,"^V",4,"^O",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]],"^I",["^J",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]]],"^Q",["^J",[null,null,null]]],"^O",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]],"^P",null,"^1T",4,"^Q",["^J",[null,null,null]],"^E",1,"^R",false,"~:methods",[["^ ","^1T",2,"^R",false,"^1C","^T"],["^ ","^1T",3,"^R",false,"^1C","^T"],["^ ","^1T",4,"^R",false,"^1C","^1?"]],"^D",61,"^F",61,"^V",4,"^W",true,"^I",["^J",[["^1H","^1I"],["^1H","^1I","^1J"],["^1H","^1I","^1J","^1K"]]],"^1L","A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$macros","~$schema.macros","^1Z","^1Z","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1I","~:schema","~:return-walked?","~$throws?","~:pre","~:else","~:wrap-error","^1H","~:err-f","^1J","~:schema.spec.variant/exception","~:post","~:options","~:guard","^1K"]],"~:order",["^2;","^28","^25","^21","^23","^26","^22","^24","^2:","^27","^29","^1H","^1I","^1J","^1K"]],"^1L",null]