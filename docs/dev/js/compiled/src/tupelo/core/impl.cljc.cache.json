["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$tupelo.core.impl","~:imports",null,"~:requires",["^ ","~$cc","~$cljs.core","^:","^:","~$clojure.core","^:","~$str","~$clojure.string","^=","^=","~$s","~$schema.core","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$cljs-env?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","~:line",14,"~:column",7,"~:end-line",14,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^K",[["~$env"]]]]],"~:doc","Take the &env from a macro, and tell whether we are expanding into cljs."],"^5","~$tupelo.core.impl/cljs-env?","^E","resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^I",16,"~:method-params",["^K",[["^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",14,"~:ret-tag","~$boolean","^H",14,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^N","Take the &env from a macro, and tell whether we are expanding into cljs."],"~$if-cljs",["^ ","^C",null,"^D",["^ ","^E","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^F",19,"^G",11,"^H",19,"^I",18,"~:macro",true,"^J",["^K",["^L",["^K",[["~$then","~$else"]]]]],"^N","Return then if we are generating cljs code and else for Clojure code.\n   https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ"],"^5","~$tupelo.core.impl/if-cljs","^E","resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^I",18,"^P",["^K",[["~$&form","~$&env","^Z","^["]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^S",false,"^F",19,"^Y",true,"^H",19,"^V",4,"^W",false,"^J",["^K",["^L",["^K",[["^Z","^["]]]]],"^N","Return then if we are generating cljs code and else for Clojure code.\n   https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ"],"~$try-catchall",["^ ","^C",null,"^D",["^ ","^E","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^I",23,"~:top-fn",["^ ","^S",true,"~:fixed-arity",0,"^V",0,"^P",["^K",[["^K",["~$body"]]]],"^J",["^K",[["~$&","^16"]]],"^R",["^K",[null]]],"^G",11,"^F",25,"^Y",true,"^H",25,"^J",["^K",["^L",["^K",[["~$&","^16"]]]]],"^N","A cross-platform variant of try-catch that catches all exceptions.\n   Does not (yet) support finally, and does not need or want an exception class."],"^5","~$tupelo.core.impl/try-catchall","^E","resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^I",23,"^14",["^ ","^S",true,"^15",0,"^V",0,"^P",["^K",[["^K",["^16"]]]],"^J",["^K",[["~$&","^16"]]],"^R",["^K",[null]]],"^P",["^K",[["^K",["^16"]]]],"^Q",null,"^15",0,"^R",["^K",[null]],"^G",1,"^S",true,"~:methods",[["^ ","^15",0,"^S",true,"~:tag",["^4",["~$seq","~$cljs.core/IList"]]]],"^F",25,"^Y",true,"^T","~$any","^H",25,"^V",0,"^W",false,"^J",["^K",[["~$&","^16"]]],"^N","A cross-platform variant of try-catch that catches all exceptions.\n   Does not (yet) support finally, and does not need or want an exception class."],"~$type-name-str",["^ ","^C",null,"^D",["^ ","^E","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^F",37,"^G",7,"^H",37,"^I",20,"^J",["^K",["^L",["^K",[["~$arg"]]]]],"^N","Returns the type/class name of a value as a string.  Works for both CLJ and CLJS."],"^5","~$tupelo.core.impl/type-name-str","^E","resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^I",20,"^P",["^K",[["^1>"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^S",false,"^F",37,"^T","~$string","^H",37,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^1>"]]]]],"^N","Returns the type/class name of a value as a string.  Works for both CLJ and CLJS."],"~$native-array?",["^ ","^C",null,"^D",["^ ","^E","/Users/sansarip/Dev/peanuts/resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^F",52,"^G",7,"^H",52,"^I",20,"^J",["^K",["^L",["^K",[["^1>"]]]]],"^N","Returns true iff arg is a native Java or JavaScript array."],"^5","~$tupelo.core.impl/native-array?","^E","resources/public/dev/js/compiled/src/tupelo/core/impl.cljc","^I",20,"^P",["^K",[["^1>"]]],"^Q",null,"^R",["^K",[null,null]],"^G",1,"^S",false,"^F",52,"^T","^U","^H",52,"^V",1,"^W",true,"^J",["^K",["^L",["^K",[["^1>"]]]]],"^N","Returns true iff arg is a native Java or JavaScript array."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$s","^>","^>","^>"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$try","~$tupelo.core.impl/Throwable","~:ns","^10","~$catch","~$js/Object"]],"~:order",["^1I","^1J","^10","^1G","^1K","^1H"]],"^N","Tupelo - Making Clojure even sweeter"]